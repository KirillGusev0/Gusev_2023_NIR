Beginning AutoGluon training... Time limit = 600s
AutoGluon will save models to 'autogluon-m4-hourly'
=================== System Info ===================
AutoGluon Version:  1.0.0
Python Version:     3.10.13
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.19045
CPU Count:          4
GPU Count:          0
Memory Avail:       0.92 GB / 5.92 GB (15.5%)
Disk Space Avail:   24.34 GB / 118.01 GB (20.6%)
===================================================
Setting presets to: fast_training

Fitting with arguments:
{'enable_ensemble': True,
 'eval_metric': MASE,
 'hyperparameters': 'very_light',
 'known_covariates_names': [],
 'num_val_windows': 1,
 'prediction_length': 48,
 'quantile_levels': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
 'random_seed': 123,
 'refit_every_n_windows': 1,
 'refit_full': False,
 'target': 'target',
 'time_limit': 600,
 'verbosity': 2}

Inferred time series frequency: 'H'
Provided train_data has 148060 rows, 200 time series. Median time series length is 700 (min=700, max=960). 

Provided dataset contains following columns:
	target:           'target'

AutoGluon will gauge predictive performance using evaluation metric: 'MASE'
	This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
===================================================

Starting training. Start time is 2023-12-18 12:24:41
Models that will be trained: ['Naive', 'SeasonalNaive', 'ETS', 'Theta', 'RecursiveTabular', 'DirectTabular']
Training timeseries model Naive. Training for up to 85.7s of the 599.7s of remaining time.
	-6.6629       = Validation score (-MASE)
	0.24    s     = Training runtime
	7.97    s     = Validation (prediction) runtime
Training timeseries model SeasonalNaive. Training for up to 98.6s of the 591.5s of remaining time.
	-1.2169       = Validation score (-MASE)
	0.22    s     = Training runtime
	0.57    s     = Validation (prediction) runtime
Training timeseries model ETS. Training for up to 118.1s of the 590.7s of remaining time.
	Time limit exceeded... Skipping ETS.
Training timeseries model Theta. Training for up to 118.0s of the 471.8s of remaining time.
	-2.1425       = Validation score (-MASE)
	0.36    s     = Training runtime
	83.00   s     = Validation (prediction) runtime
Training timeseries model RecursiveTabular. Training for up to 129.5s of the 388.4s of remaining time.
	-0.9124       = Validation score (-MASE)
	18.02   s     = Training runtime
	3.45    s     = Validation (prediction) runtime
Training timeseries model DirectTabular. Training for up to 183.5s of the 366.9s of remaining time.
	-1.3308       = Validation score (-MASE)
	13.88   s     = Training runtime
	1.07    s     = Validation (prediction) runtime
Fitting simple weighted ensemble.
	Ensemble weights: {'DirectTabular': 0.05, 'RecursiveTabular': 0.92, 'SeasonalNaive': 0.03}
	-0.9055       = Validation score (-MASE)
	4.48    s     = Training runtime
	5.10    s     = Validation (prediction) runtime
Training complete. Models trained: ['Naive', 'SeasonalNaive', 'Theta', 'RecursiveTabular', 'DirectTabular', 'WeightedEnsemble']
Total runtime: 252.51 s
Best model: WeightedEnsemble
Best model score: -0.9055
Model not specified in predict, will default to the model with the best validation score: WeightedEnsemble